/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Webflow from "../../api";
import * as core from "../../core";

export const Order: core.serialization.ObjectSchema<serializers.Order.Raw, Webflow.Order> = core.serialization.object({
    orderId: core.serialization.string().optional(),
    status: core.serialization.lazy(async () => (await import("..")).OrderStatus).optional(),
    comment: core.serialization.string().optional(),
    orderComment: core.serialization.string().optional(),
    acceptedOn: core.serialization.date().optional(),
    fulfilledOn: core.serialization.date().optional(),
    refundedOn: core.serialization.date().optional(),
    disputedOn: core.serialization.date().optional(),
    disputeUpdatedOn: core.serialization.date().optional(),
    disputeLastStatus: core.serialization.lazy(async () => (await import("..")).OrderDisputeLastStatus).optional(),
    customerPaid: core.serialization.lazyObject(async () => (await import("..")).OrderPrice).optional(),
    netAmount: core.serialization.lazyObject(async () => (await import("..")).OrderPrice).optional(),
    applicationFee: core.serialization.lazyObject(async () => (await import("..")).OrderPrice).optional(),
    allAddresses: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("..")).OrderAddress))
        .optional(),
    shippingAddress: core.serialization.lazyObject(async () => (await import("..")).OrderAddress).optional(),
    billingAddress: core.serialization.lazyObject(async () => (await import("..")).OrderAddress).optional(),
    shippingProvider: core.serialization.string().optional(),
    shippingTracking: core.serialization.string().optional(),
    shippingTrackingUrl: core.serialization.property("shippingTrackingURL", core.serialization.string().optional()),
    customerInfo: core.serialization.lazyObject(async () => (await import("..")).OrderCustomerInfo).optional(),
    purchasedItems: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("..")).OrderPurchasedItem))
        .optional(),
    purchasedItemsCount: core.serialization.number().optional(),
    stripeDetails: core.serialization.lazyObject(async () => (await import("..")).StripeDetails).optional(),
    stripeCard: core.serialization.lazyObject(async () => (await import("..")).StripeCard).optional(),
    paypalDetails: core.serialization.lazyObject(async () => (await import("..")).PaypalDetails).optional(),
    customData: core.serialization
        .list(core.serialization.record(core.serialization.string(), core.serialization.unknown()))
        .optional(),
    metadata: core.serialization.lazyObject(async () => (await import("..")).OrderMetadata).optional(),
    isCustomerDeleted: core.serialization.boolean().optional(),
    isShippingRequired: core.serialization.boolean().optional(),
    hasDownloads: core.serialization.boolean().optional(),
    paymentProcessor: core.serialization.string().optional(),
    totals: core.serialization.lazyObject(async () => (await import("..")).OrderTotals).optional(),
    downloadFiles: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("..")).OrderDownloadFilesItem))
        .optional(),
});

export declare namespace Order {
    interface Raw {
        orderId?: string | null;
        status?: serializers.OrderStatus.Raw | null;
        comment?: string | null;
        orderComment?: string | null;
        acceptedOn?: string | null;
        fulfilledOn?: string | null;
        refundedOn?: string | null;
        disputedOn?: string | null;
        disputeUpdatedOn?: string | null;
        disputeLastStatus?: serializers.OrderDisputeLastStatus.Raw | null;
        customerPaid?: serializers.OrderPrice.Raw | null;
        netAmount?: serializers.OrderPrice.Raw | null;
        applicationFee?: serializers.OrderPrice.Raw | null;
        allAddresses?: serializers.OrderAddress.Raw[] | null;
        shippingAddress?: serializers.OrderAddress.Raw | null;
        billingAddress?: serializers.OrderAddress.Raw | null;
        shippingProvider?: string | null;
        shippingTracking?: string | null;
        shippingTrackingURL?: string | null;
        customerInfo?: serializers.OrderCustomerInfo.Raw | null;
        purchasedItems?: serializers.OrderPurchasedItem.Raw[] | null;
        purchasedItemsCount?: number | null;
        stripeDetails?: serializers.StripeDetails.Raw | null;
        stripeCard?: serializers.StripeCard.Raw | null;
        paypalDetails?: serializers.PaypalDetails.Raw | null;
        customData?: Record<string, unknown>[] | null;
        metadata?: serializers.OrderMetadata.Raw | null;
        isCustomerDeleted?: boolean | null;
        isShippingRequired?: boolean | null;
        hasDownloads?: boolean | null;
        paymentProcessor?: string | null;
        totals?: serializers.OrderTotals.Raw | null;
        downloadFiles?: serializers.OrderDownloadFilesItem.Raw[] | null;
    }
}

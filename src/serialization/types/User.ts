/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Webflow from "../../api";
import * as core from "../../core";

export const User: core.serialization.ObjectSchema<serializers.User.Raw, Webflow.User> = core.serialization.object({
    id: core.serialization.string().optional(),
    isEmailVerified: core.serialization.boolean().optional(),
    lastUpdated: core.serialization.date().optional(),
    invitedOn: core.serialization.date().optional(),
    createdOn: core.serialization.date().optional(),
    lastLogin: core.serialization.date().optional(),
    status: core.serialization.lazy(async () => (await import("..")).UserStatus).optional(),
    accessGroups: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("..")).UserAccessGroupsItem))
        .optional(),
    data: core.serialization.lazyObject(async () => (await import("..")).UserData).optional(),
});

export declare namespace User {
    interface Raw {
        id?: string | null;
        isEmailVerified?: boolean | null;
        lastUpdated?: string | null;
        invitedOn?: string | null;
        createdOn?: string | null;
        lastLogin?: string | null;
        status?: serializers.UserStatus.Raw | null;
        accessGroups?: serializers.UserAccessGroupsItem.Raw[] | null;
        data?: serializers.UserData.Raw | null;
    }
}
